3 MINUS 2 PLUS 3 TIMES 2;

let X = 1 in 
	if X EQUALS 2 then 3 else 4 fi
end;

if 3 GREATERTHAN 2 
	then let X = TRUE in
		X AND NOT X 
		end
	else TRUE
fi;

let 
	f = fn (x:int) : int => x PLUS 1 
in
	(f 3)
end;

fun func1 (f:int->int):int => (f 1) ;
let 
	f = fn(x:int): int=>x PLUS 1
in
	(func1 f)
end;

let 
	dummy = fn(x:int):int->int =>fn(y:int):int => x PLUS y
in
let  
	f = fn(h:int->(int->int)): int=> 7 PLUS ((h 2) 4)
in
    let
        g = fn(x:int): (int->int)=> fn (y:int):int => x PLUS y
	in
        let
            j = fn(y:int): int=> y TIMES 2
        in
            ((dummy (f g)) 4)
        end
    end
end
end;


let  
        j = fn(y:int): int=> y TIMES 2
in
    let
        g = fn(x:int->int): int=> (x 3) PLUS (x 4)
	in
        let
            f = fn(h:(int->int)->int): int=> 7 PLUS (h j)
        in
            (f g)
        end
    end
end;

fun func1 (f:int):int => if f EQUALS 0 then 1 else (func1 (f MINUS 1)) TIMES f fi;
let 
	f = fn(x:int): (int->int)=> fn(y:int):int->int => fn(z:int):int => x PLUS y PLUS z
in
	(func1 (((f 1) 3) 1))
end;

(((fn(x:int): (int->int->int)=> fn(y:int):int->int => fn(z:int):int => x PLUS y PLUS z 3)4)500)
